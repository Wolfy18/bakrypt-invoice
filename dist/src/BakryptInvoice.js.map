{"version":3,"file":"BakryptInvoice.js","sourceRoot":"","sources":["../../src/BakryptInvoice.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css } from 'lit';\nimport { useEffect, useState } from 'haunted';\nimport shoeStyles from '@shoelace-style/shoelace/dist/themes/light.styles.js';\n\nimport SlInput from '@shoelace-style/shoelace/dist/components/input/input.js';\nimport SlTextarea from '@shoelace-style/shoelace/dist/components/textarea/textarea.js';\nimport SlDivider from '@shoelace-style/shoelace/dist/components/divider/divider.js';\nimport SlDetails from '@shoelace-style/shoelace/dist/components/details/details.js';\nimport SlQrCode from '@shoelace-style/shoelace/dist/components/qr-code/qr-code.js';\nimport SlAlert from '@shoelace-style/shoelace/dist/components/alert/alert.js';\nimport SlBadge from '@shoelace-style/shoelace/dist/components/badge/badge.js';\nimport SlButton from '@shoelace-style/shoelace/dist/components/button/button.js';\nimport { ITransaction, ErrorResponse, AccessToken } from './types.js';\nimport { useStyles } from './hooks/useStyles.js';\n\nif (!customElements.get('sl-input')) {\n  customElements.define('sl-input', SlInput);\n}\n\nif (!customElements.get('sl-textarea')) {\n  customElements.define('sl-textarea', SlTextarea);\n}\n\nif (!customElements.get('sl-divider')) {\n  customElements.define('sl-divider', SlDivider);\n}\n\nif (!customElements.get('sl-details')) {\n  customElements.define('sl-details', SlDetails);\n}\n\nif (!customElements.get('sl-alert')) {\n  customElements.define('sl-alert', SlAlert);\n}\n\nif (!customElements.get('sl-badge')) {\n  customElements.define('sl-badge', SlBadge);\n}\n\nif (!customElements.get('sl-button')) {\n  customElements.define('sl-button', SlButton);\n}\n\nif (!customElements.get('sl-qr-code')) {\n  customElements.define('sl-qr-code', SlQrCode);\n}\n\nfunction BakryptInvoice(\n  this: any,\n  {\n    transaction = undefined,\n    collection = undefined,\n    accessToken = undefined,\n    csrfToken = undefined,\n    testnet,\n  }: // open = false,\n  {\n    transaction: ITransaction | undefined;\n    collection: [] | undefined;\n    accessToken: AccessToken | undefined;\n    testnet: string;\n    csrfToken: string | undefined;\n    // open: boolean;\n  }\n) {\n  const bakryptURI = testnet\n    ? 'https://testnet.bakrypt.io'\n    : 'https://bakrypt.io';\n\n  const transactionVariants: { [key: string]: string } = {\n    error: 'danger',\n    rejected: 'danger',\n    canceled: 'danger',\n    burning: 'warning',\n    royalties: 'warning',\n    processing: 'warning',\n    refund: 'warning',\n    confirmed: 'success',\n    'stand-by': 'success',\n    waiting: 'primary',\n    preauth: 'primary',\n  };\n\n  const [transactionObj, setTransaction] = useState<ITransaction>();\n  const [requestLoading, setRequestLoading] = useState(false);\n\n  useStyles(this, [\n    shoeStyles,\n    css`\n      :host {\n        font-family: 'arial';\n        font-weight: 400;\n      }\n\n      :host sl-input,\n      :host input,\n      :host sl-textarea,\n      :host sl-details {\n        margin-bottom: 2rem;\n      }\n\n      :host .form-control__help-text {\n        margin-top: 0.5rem;\n      }\n    `,\n  ]);\n\n  const notify = (message: string, type: string) => {\n    const event = new CustomEvent('notification', {\n      bubbles: true,\n      composed: true,\n      detail: [message, type],\n    });\n\n    this.dispatchEvent(event);\n  };\n\n  // const retry = () => {\n  //   const event = new CustomEvent('retryTransaction', {\n  //     bubbles: true,\n  //     composed: true,\n  //     detail: { tx: transaction },\n  //   });\n\n  //   this.dispatchEvent(event);\n  // };\n\n  // const refund = () => {\n  //   const event = new CustomEvent('refundTransaction', {\n  //     bubbles: true,\n  //     composed: true,\n  //     detail: { tx: transaction },\n  //   });\n\n  //   this.dispatchEvent(event);\n  // };\n\n  // Retrieve transaction information\n  const retrieveTransaction = async (uuid: string) => {\n    let tx;\n\n    try {\n      const requestHeaders: any = {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      };\n\n      // if (csrfToken && csrfToken.length > 0) {\n      //   requestHeaders['X-CSRFToken'] = csrfToken;\n      // }\n\n      const retrieveTransactionRequest = await fetch(\n        `${bakryptURI}/v1/transactions/${uuid}/`,\n        {\n          method: 'GET',\n          headers: requestHeaders,\n        }\n      );\n\n      if (retrieveTransactionRequest.ok) {\n        const jsonResponse: ITransaction =\n          await retrieveTransactionRequest.json();\n        setTransaction(jsonResponse);\n        tx = jsonResponse;\n\n        // Repeat call every 15 seconds\n        setTimeout(() => {\n          retrieveTransaction(uuid);\n        }, 10000);\n      } else {\n        const jsonResponse: ErrorResponse =\n          await retrieveTransactionRequest.json();\n        if (jsonResponse.error_description)\n          notify(jsonResponse.error_description, 'danger');\n        else if (jsonResponse.error) notify(jsonResponse.error, 'danger');\n        else if (jsonResponse.detail) notify(jsonResponse.detail, 'danger');\n      }\n    } catch (error) {\n      // console.log(error);\n      notify('Unable to retrieve transaction.', 'danger');\n    }\n\n    return tx;\n  };\n\n  // Submit collection to the assets API\n  const submitRetry = async (Tx: ITransaction) => {\n    try {\n      const requestHeaders: any = {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      };\n\n      if (csrfToken && csrfToken.length > 0) {\n        requestHeaders['X-CSRFToken'] = csrfToken;\n      }\n\n      const submitRetryRequest = await fetch(\n        `${bakryptURI}/v1/transactions/${Tx.uuid}/mint/`,\n        {\n          method: 'POST',\n          headers: requestHeaders,\n        }\n      );\n\n      if (submitRetryRequest.ok) {\n        await submitRetryRequest.json();\n\n        notify('Request was submitted', 'success');\n        // console.log(jsonResponse);\n      } else {\n        const jsonResponse: ErrorResponse = await submitRetryRequest.json();\n        if (jsonResponse.error_description)\n          notify(jsonResponse.error_description, 'danger');\n        else if (jsonResponse.error) notify(jsonResponse.error, 'danger');\n        else if (jsonResponse.detail) notify(jsonResponse.detail, 'danger');\n      }\n    } catch (error) {\n      notify(`Unable to submit request. Error: ${error}`, 'danger');\n    }\n  };\n\n  // Submit collection to the assets API\n  const submitRefund = async (Tx: ITransaction) => {\n    setRequestLoading(true);\n\n    try {\n      const requestHeaders: any = {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      };\n\n      if (csrfToken && csrfToken.length > 0) {\n        requestHeaders['X-CSRFToken'] = csrfToken;\n      }\n\n      const submitRefundRequest = await fetch(\n        `${bakryptURI}/v1/transactions/${Tx.uuid}/refund/`,\n        {\n          method: 'POST',\n          headers: requestHeaders,\n        }\n      );\n\n      if (submitRefundRequest.ok) {\n        await submitRefundRequest.json();\n        notify('Refund was submitted', 'success');\n        // console.log(jsonResponse);\n      } else {\n        const jsonResponse: ErrorResponse = await submitRefundRequest.json();\n        if (jsonResponse.error_description)\n          notify(jsonResponse.error_description, 'danger');\n        else if (jsonResponse.error) notify(jsonResponse.error, 'danger');\n        else if (jsonResponse.detail) notify(jsonResponse.detail, 'danger');\n      }\n    } catch (error) {\n      notify(`Unable to refund request. Error: ${error}`, 'danger');\n    }\n    setRequestLoading(false);\n  };\n\n  useEffect(() => {\n    if (transaction) {\n      setTransaction(transaction);\n      if (accessToken) retrieveTransaction(transaction.uuid);\n    }\n  }, [transaction, collection]);\n\n  return html`\n    <!-- Spinner loader overlay -->\n    ${requestLoading\n      ? html`\n          <sl-spinner\n            style=\"position:absolute; right: 2rem; --track-width: 5px; font-size: 1.5rem\"\n          ></sl-spinner>\n        `\n      : null}\n    ${requestLoading\n      ? html` <div part=\"overlay\" class=\"dialog__overlay\" tabindex=\"-1\"></div> `\n      : null}\n    <!-- Transaction Dialog -->\n    <div style=\"padding: 1rem\">\n      <div\n        style=\"\n      \"\n      >\n        <small style=\"float:right\"><i>Unique Identifier</i></small>\n        <sl-input\n          maxlength=\"255\"\n          label=\"Policy ID\"\n          value=${transactionObj\n            ? (<ITransaction>transactionObj).policy_id\n            : ''}\n          type=\"text\"\n          readonly\n          filled\n        ></sl-input>\n\n        ${transactionObj &&\n        !['confirmed', 'canceled'].includes(\n          (<ITransaction>transactionObj).status\n        )\n          ? html` <div\n              style=\"display:grid; grid-template-columns: repeat(auto-fit, minmax(305px, 1fr)); grid-gap: 0.5rem; align-items:center; margin-bottom: 2rem\"\n            >\n              <sl-details\n                summary=\"Click here to show a QR Code and scan the deposit address.\"\n              >\n                <div style=\"text-align:center\">\n                  <sl-qr-code\n                    value=${transactionObj\n                      ? (<ITransaction>transactionObj).deposit_address\n                      : 'Not found'}\n                    label=\"Scan this code for the deposit_address!\"\n                  ></sl-qr-code>\n                </div>\n              </sl-details>\n              <sl-alert variant=\"warning\" open>\n                <strong>DO NOT TRANSFER FUNDS FROM AN EXCHANGE!</strong> <br />\n                We will send all tokens and change to the payor's address;\n                meaning that the payment must be done from a wallet that you can\n                control and its capable of manage native tokens on Cardano like\n                <a target=\"_blank\" rel=\"nofollow\" href=\"https://namiwallet.io/\"\n                  >Nami</a\n                >,\n                <a\n                  target=\"_blank\"\n                  rel=\"nofollow\"\n                  href=\"https://flint-wallet.com/\"\n                  >Flint</a\n                >,\n                <a\n                  target=\"_blank\"\n                  rel=\"nofollow\"\n                  href=\"https://yoroi-wallet.com/#/\"\n                >\n                  Yoroi</a\n                >,\n                <a\n                  target=\"_blank\"\n                  rel=\"nofollow\"\n                  href=\"https://daedaluswallet.io/\"\n                  >Daedalus</a\n                >\n                or\n                <a\n                  target=\"_blank\"\n                  rel=\"nofollow\"\n                  href=\"https://ccvault.io/app/mainnet/welcome\"\n                  >Eternl</a\n                >\n              </sl-alert>\n            </div>`\n          : null}\n\n        <h4 style=\"color: var(--sl-color-warning-600);\">\n          Payment Type:\n          ${transactionObj ? (<ITransaction>transactionObj).type : null}\n        </h4>\n        ${transactionObj &&\n        !['confirmed', 'canceled'].includes(\n          (<ITransaction>transactionObj).status\n        )\n          ? html` <sl-input\n              maxlength=\"255\"\n              type=\"number\"\n              label=\"Processing Cost\"\n              value=${transactionObj ? (<ITransaction>transactionObj).cost : ''}\n              readonly\n              filled\n            ></sl-input>`\n          : html` <sl-input\n              maxlength=\"255\"\n              type=\"number\"\n              label=\"Min. Processing Cost\"\n              value=${transactionObj ? (<ITransaction>transactionObj).cost : ''}\n              readonly\n              filled\n            ></sl-input>`}\n        ${transactionObj &&\n        !['confirmed', 'canceled'].includes(\n          (<ITransaction>transactionObj).status\n        )\n          ? html` <small style=\"float:right\">Click to copy</small\n              ><sl-input\n                maxlength=\"255\"\n                label=\"Deposit Address\"\n                value=${transactionObj\n                  ? (<ITransaction>transactionObj).deposit_address\n                  : ''}\n                type=\"password\"\n                readonly\n                filled\n                toggle-password\n                @click=${(e: any) => {\n                  if (e.currentTarget && e.currentTarget.value.length > 0) {\n                    const depAddr = e.currentTarget.value;\n                    navigator.clipboard.writeText(depAddr);\n                    notify('Copy to clipboard!', 'success');\n                  } else if (e.path && e.path.length > 0) {\n                    const depAddr = e.path[0].value;\n                    navigator.clipboard.writeText(depAddr);\n                    notify('Copy to clipboard!', 'success');\n                  }\n                  return false;\n                }}\n              ></sl-input>`\n          : null}\n        <sl-input\n          maxlength=\"255\"\n          label=\"Transaction UUID\"\n          value=${transactionObj ? (<ITransaction>transactionObj).uuid : ''}\n          type=\"text\"\n          readonly\n          filled\n        ></sl-input>\n        <sl-input\n          maxlength=\"255\"\n          label=\"Created on\"\n          value=${transactionObj\n            ? new Date((<ITransaction>transactionObj).created_on).toUTCString()\n            : ''}\n          type=\"text\"\n          readonly\n          filled\n        ></sl-input>\n        <sl-input\n          maxlength=\"255\"\n          label=\"Expires on\"\n          value=${transactionObj\n            ? new Date((<ITransaction>transactionObj).expires_on).toUTCString()\n            : ''}\n          type=\"text\"\n          readonly\n          filled\n        ></sl-input>\n        <sl-input\n          maxlength=\"255\"\n          label=\"Conv. Fees\"\n          value=${transactionObj\n            ? (<ITransaction>transactionObj).convenience_fee\n            : ''}\n          type=\"text\"\n          readonly\n          filled\n        ></sl-input>\n\n        <sl-alert variant=\"warning\" open>\n          Remember, to complete your transaction, your payment must be received\n          before the expiration time shown above. Late payments can be refunded.\n          Minted assets are non-refundable and non-transferable. All times shown\n          are UTC (Coordinated Universal Time).\n        </sl-alert>\n        <sl-divider></sl-divider>\n        <div>\n          <sl-textarea\n            style=\"margin-bottom:1rem\"\n            label=\"The status refreshes every 10 seconds.\"\n            value=${transaction\n              ? (<ITransaction>transaction).status_description\n              : ''}\n            readonly\n            filled\n          >\n          </sl-textarea>\n          <sl-badge\n            style=\"margin-bottom: 2rem; display: grid\"\n            .pulse=${true}\n            variant=${transactionObj && (<ITransaction>transactionObj).status\n              ? transactionVariants[<string>transactionObj.status]\n              : 'neutral'}\n            >${transactionObj\n              ? (<ITransaction>transactionObj).status\n              : ''}</sl-badge\n          >\n          <p>\n            Please do not refresh the page, otherwise this session will be\n            restarted.\n          </p>\n        </div>\n      </div>\n      <sl-divider></sl-divider>\n      <div>\n        ${transactionObj &&\n        (<ITransaction>transactionObj).status &&\n        ['rejected', 'error'].includes((<ITransaction>transactionObj).status)\n          ? html`\n              <sl-button\n                variant=\"primary\"\n                style=\"margin-right:1rem\"\n                @click=${() => submitRetry(transactionObj)}\n                >Retry</sl-button\n              >\n            `\n          : null}\n        ${transactionObj &&\n        (<ITransaction>transactionObj).status &&\n        !['confirmed', 'canceled'].includes(\n          (<ITransaction>transactionObj).status\n        )\n          ? html`\n              <sl-button\n                variant=\"warning\"\n                outline\n                @click=${() => {\n                  if (\n                    window.confirm('Would you like to refund the transaction?')\n                  ) {\n                    submitRefund(transactionObj);\n                  }\n                }}\n                style=\"\"\n                >Submit Refund</sl-button\n              >\n            `\n          : null}\n      </div>\n    </div>\n  `;\n}\n\nexport default BakryptInvoice;\n"]}